group 'cd.go.plugin.config.yaml'
version '0.8.6'

apply plugin: 'java'
apply plugin: 'idea'

project.ext.pluginDesc = [
        version    : project.version,
        goCdVersion: '18.12.0'
]

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version: '2.6.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'org.apache.ant', name: 'ant', version: '1.7.1'
    compile group: 'com.beust', name: 'jcommander', version: '1.72'
    compile group: 'com.esotericsoftware.yamlbeans', name: 'yamlbeans', version: '1.13'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.23'
    compile group: 'com.hubspot.jinjava', name: 'jinjava', version: '2.4.14'

    compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: project.pluginDesc.goCdVersion
    testCompile group: 'cd.go.plugin', name: 'go-plugin-api', version: project.pluginDesc.goCdVersion

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
}

processResources {
    from("src/main/resource-templates") {
        filesMatching('*') {
            expand project.pluginDesc
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDir 'src/main/resources'
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

test {
    useJUnit {
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
    }
}

// create a fat jar with all dependencies
jar {
    baseName = project.name

    manifest {
        attributes 'Main-Class': 'cd.go.plugin.config.yaml.cli.YamlPluginCli'
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}
