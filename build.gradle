import cd.go.plugin.buildsrc.license.NoticeFileGenerator
import cd.go.plugin.buildsrc.license.TeeRenderer
import com.github.jk1.license.render.SimpleHtmlReportRenderer

plugins {
    id "com.github.jk1.dependency-license-report"
}

group 'cd.go.plugin.config.yaml'
version "0.14.1"

apply plugin: 'java'
apply plugin: "com.github.jk1.dependency-license-report"

project.ext {
    pluginDesc = [
            version: project.version,
            goCdVersion: '20.4.0'
    ]

    pluginApiVersion = '20.3.0'
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.1'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    implementation group: 'org.apache.ant', name: 'ant', version: '1.10.12'
    implementation group: 'com.beust', name: 'jcommander', version: '1.82'
    implementation group: 'com.esotericsoftware.yamlbeans', name: 'yamlbeans', version: '1.15'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.32'

    compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: project.pluginApiVersion
    testImplementation group: 'cd.go.plugin', name: 'go-plugin-api', version: project.pluginApiVersion

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.9.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from("src/main/resource-templates") {
        filesMatching('*') {
            expand project.pluginDesc
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDir 'src/main/resources'
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

task copyTestResources(type: Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}

processTestResources {
    dependsOn copyTestResources
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
    }
}

// create a fat jar with all dependencies
jar {
    archiveBaseName = project.name
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    manifest {
        attributes 'Main-Class': 'cd.go.plugin.config.yaml.cli.YamlPluginCli'
    }

    from(generateLicenseReport) {
        into "dependency-license-report"
        exclude "NOTICE.txt"
    }

    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }

    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

licenseReport {
    renderers = [new NoticeFileGenerator(new TeeRenderer(new SimpleHtmlReportRenderer()), "${project.buildDir}/reports/dependency-license/")]
}
